<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[FredLawl's Blog]]></title>
  <link href="http://fredlawl.github.io/atom.xml" rel="self"/>
  <link href="http://fredlawl.github.io/"/>
  <updated>2014-01-26T17:24:14-06:00</updated>
  <id>http://fredlawl.github.io/</id>
  <author>
    <name><![CDATA[Frederick Lawler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Breaking away from PHP]]></title>
    <link href="http://fredlawl.github.io/article/breaking-away-from-php/"/>
    <updated>2014-01-26T16:17:55-06:00</updated>
    <id>http://fredlawl.github.io/article/breaking-away-from-php</id>
    <content type="html"><![CDATA[<p>Today marked the day where I am took my first steps to expanding my horizons
through learning the Python language. A couple of weeks ago, during a meeting
at work, a few other developers and I discussed plans to design and develop a
new CRM for the company.</p>

<!-- more -->


<h2>The CRM</h2>

<p>The CRM was broken up into three pieces: a database, a web-service, and a
front-end. The database piece is to store our data such as: users, tasks,
events, and discussions. The web-service piece is for syncing up various web
services across some of the online systems the company uses. The front-end part
of the CRM is a means to provide a easy interface to enter time, create
projects, and display information stored within the database.</p>

<h2>Choice to move</h2>

<p>My task was to lead a small team in the development of the web-service portion
of the CRM. The various programming languages that came across the table were:
PHP, Ruby, and Python. The developers of my team, including myself, are all
extremely comfortable using PHP&mdash;since we use that as our primary go-to language
for web development. Though we were comfortable with PHP, we saw this as an
opportunity to expand our knowledge and we eventually decided on using Python
for this portion of the CRM.</p>

<p>We choose Python over PHP for a couple of reasons. The primary reason we chose
Python was because of the scope of the project. The scope calls for parallel
processing because the web-service needs to sync data across many web-based
applications. The more services that are added to the project, the slower the
syncing and processing. Since PHP does not handle forking and threading very
nicely, Python seemed to be the optimal choice. The second reason we chose
Python was because of the ability to add technologies on the fly. This will be
important through the development process.</p>

<h2>Getting Started</h2>

<p>A part of the web-service piece is to be able to accept and parse webhooks that
are passed to it by the web services. Clearly, there had to be a way to serve
python files over the internet. Instead of designing a system to accept and
serve python files, I came to the conclusion of using the <a href="https://code.google.com/p/modwsgi/">mod_wsgi</a> for Apache combined with <a href="http://www.cherrypy.org/">CherryPy</a>.
To avoid re-inventing the wheel.</p>

<p>Since this was the first time ever considering Python for a web project, I had
to overcome the learning curve of installing and setting up wsgi_mod. To some,
this may be an easy task, but as a first-timer I had some difficulties.</p>

<p>I did not begin the process by installing it on my own hosted server, instead I
wanted to try installing it on my local development. Since MacOSX is my primary
development platform I did the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew tap homebrew/apache
</span><span class='line'>$ brew install mod_wsgi
</span><span class='line'>$ cd /etc/apache2
</span><span class='line'>$ subl . # Because I use sublime text 2 as my editor of choice
</span><span class='line'>
</span><span class='line'># Copied and pasted:
</span><span class='line'># LoadModule wsgi_module /usr/local/Cellar/mod_wsgi/3.4/libexec/mod_wsgi.so
</span><span class='line'># into http.conf
</span><span class='line'>
</span><span class='line'># Opened up my vhosts file and added, based off recommended configurations:
</span><span class='line'># &lt;VirtualHost *:80&gt;
</span><span class='line'>#        ServerName python.local
</span><span class='line'>#        ServerAlias www.python.local
</span><span class='line'>#        DocumentRoot "/Users/fredlawl/Sites/python/www"
</span><span class='line'>#
</span><span class='line'>#        Alias /robots.txt /Users/fredlawl/Sites/python/www/robots.txt
</span><span class='line'>#        Alias /favicon.ico /Users/fredlawl/Sites/python/www/favicon.ico
</span><span class='line'>#        Alias /media/ /Users/fredlawl/Sites/python/www/media/
</span><span class='line'>#
</span><span class='line'>#        &lt;Directory /Users/fredlawl/Sites/python/www&gt;
</span><span class='line'>#                Order allow,deny
</span><span class='line'>#                Allow from all
</span><span class='line'>#        &lt;/Directory&gt;
</span><span class='line'>#
</span><span class='line'>#        WSGIDaemonProcess python.local processes=2 threads=15 display-name=%{GROUP}
</span><span class='line'>#        WSGIProcessGroup python.local
</span><span class='line'>#        WSGIScriptAlias / /Users/fredlawl/Sites/python/wsgi-scripts/app.wsgi
</span><span class='line'>#
</span><span class='line'>#        &lt;Directory /Users/fredlawl/Sites/python/wsgi-scripts&gt;
</span><span class='line'>#                Order allow,deny
</span><span class='line'>#                Allow from all
</span><span class='line'>#        &lt;/Directory&gt;
</span><span class='line'># &lt;/VirtualHost&gt;
</span><span class='line'># ... then saved.
</span><span class='line'>
</span><span class='line'>$ cd /Users/fredlawl/Sites
</span><span class='line'>$ mkdir python
</span><span class='line'>$ cd python
</span><span class='line'>$ mkdir www
</span><span class='line'>$ mkdir wsgi-scripts
</span><span class='line'>$ cd wsgi-scripts
</span><span class='line'>$ nano app.wsgi
</span><span class='line'>
</span><span class='line'># pasted in the following:
</span><span class='line'># def application(environ, start_response):
</span><span class='line'>#     status = '200 OK'
</span><span class='line'>#     output = 'Hello World!'
</span><span class='line'>#
</span><span class='line'>#     response_headers = [('Content-type', 'text/plain'),
</span><span class='line'>#                         ('Content-Length', str(len(output)))]
</span><span class='line'>#     start_response(status, response_headers)
</span><span class='line'>#
</span><span class='line'>#     return [output]
</span><span class='line'>
</span><span class='line'>$ sudo apachectl restart
</span><span class='line'>$ sudo nano /etc/hosts
</span><span class='line'>
</span><span class='line'># added in
</span><span class='line'># 127.0.0.1     python.local</span></code></pre></td></tr></table></div></figure>


<p>And there it was&hellip;Hello World! was displayed on my screen at <code>http://python.local/</code></p>

<p>I have not gotten into the installation of CherryPy just yet, but that is a post
for another day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Email Obfuscation]]></title>
    <link href="http://fredlawl.github.io/article/email-obfuscation/"/>
    <updated>2014-01-16T18:50:37-06:00</updated>
    <id>http://fredlawl.github.io/article/email-obfuscation</id>
    <content type="html"><![CDATA[<p>Today at work I got a task from a client regarding Email Obfuscation. Obviously
we all come across scenarios where we need to better secure our sites for our
clients. But what about emails? It is common for a random bot to eventually
crawl to our sites and pull all
<code>&lt;a href="mailto:someemail@somedomain.com"&gt;someemail@somedomain.com&lt;/a&gt;</code> tags
from our code and then add the emails to some job queue to spam the f*** out of
us.</p>

<!-- more -->


<p>Granted, it is important we prevent spam, but to what extent shall we do it? I
was suggested the article <a href="http://techblog.tilllate.com/2008/07/20/ten-methods-to-obfuscate-e-mail-addresses-compared/">Nine ways to obfuscate e-mail addresses compared</a> (Pardon the article title, there&rsquo;s only three options I see on the page,
unless I missed something). The website offers three solutions that may solve
our problem. The stats of the graph speak for themselves, but Google searches
suggest many other solutions to the problem as well. Are all the methods 100%
full-proof&mdash;-nope.</p>

<p>One could go crazy trying to find or figure out the absolute best way to
obfuscate our emails. Many of the solutions will stop most bots; however, as
technology improves, the more &ldquo;smart&rdquo; spam bots become. Why do people have to
ruin everything for everyone else? I don&rsquo;t know, and neither will any of us.
The reality is, it doesn&rsquo;t matter what we do.</p>

<p>Let us think for a moment. We can stop the vast majority of bots, but, we can&rsquo;t
stop all of them without destroying a users&#8217; experience&mdash;and even then we&rsquo;re
not protected. The reality is, if a spammer <em>really</em> wanted to target your site,
they can.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[If I wasn't a Programmer...]]></title>
    <link href="http://fredlawl.github.io/article/if-i-wasnt-a-programmer-dot-dot-dot/"/>
    <updated>2014-01-12T12:05:35-06:00</updated>
    <id>http://fredlawl.github.io/article/if-i-wasnt-a-programmer-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve heard the saying before:</p>

<blockquote><p>&ldquo;If I wasn&rsquo;t a programmer I would be a writer.&rdquo;</p></blockquote>

<!-- more -->


<p>That statement would be true. Over the past few months I&rsquo;ve felt a strong desire
to start blogging and writing about my experiences as a young web-developer.</p>

<p>But then I began to think&hellip; I recall that it wasn&rsquo;t more than a year ago where
I still wanted to be a educator with a discipline in Latin. Would that still make
me a writer if I wasn&rsquo;t a programmer? Possibly. I suppose that every programmer
would be a writer if they weren&rsquo;t programming. Google searches suggest that most
programmers are also writers in their spare time. I&rsquo;ll just answer my own
statement and say &ldquo;Yes&rdquo; with confidence.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Cordova for iOS &amp; Android Development]]></title>
    <link href="http://fredlawl.github.io/article/using-cordova-for-ios-and-android-development/"/>
    <updated>2014-01-11T22:25:40-06:00</updated>
    <id>http://fredlawl.github.io/article/using-cordova-for-ios-and-android-development</id>
    <content type="html"><![CDATA[<p>Recently I had the pleasure of writing my first mobile app. Without a background
or any general knowledge of Objective-C, I had to use my skills as a JavaScript
programmer to bridge the two together using a Open Sourced framework called <a href="http://cordova.apache.org/">Cordova</a>.</p>

<!-- more -->


<h2>Overview of Cordova</h2>

<p>Cordova is a mobile app framework with an emphasis on cross-compability of all
major mobile devices in the market. With a few vendor plugins, most of
functionality that you would expect from app can be easily installed and put to
use. Cordova also has extensive documentation that clearly outlines its usage
and configuration. The documentation also includes notes on creating custom
plugins if you can&rsquo;t find any others on git that meet your criteria.</p>

<h3>Some links to get started:</h3>

<ul>
<li><a href="http://cordova.apache.org/docs/en/3.2.0/index.html">Corodva Docs</a> for full documentation.</li>
<li><a href="http://cordova.apache.org/docs/en/3.2.0/guide_cli_index.md.html#The%20Command-Line%20Interface">Cordova CLI</a> for getting started with cordova.</li>
<li><a href="http://cordova.apache.org/docs/en/3.2.0/_index.html">Cordova Index</a> for documentation index.</li>
<li><a href="http://maxogden.com/fast-webview-applications.html">Fast WebView Applications</a> for useful tips/tricks to making your apps work nicely with CSS and HTML5</li>
</ul>


<h2>Solutions to Problems</h2>

<p>Working with Cordova was fairly simple and straight forward. The documentation
allowed me to create an app from start to finish with minimal headaches. Through
the development process there were some obstacles to overcome in a short period
of time.</p>

<p>An obstacle that was particularly hard to adjust to was the fact that the
project called for a mobile-site version, and a app version of the app.
Overcoming that obstacle was a challenge because links could not be treated in
the same manner. When compiled, the app relies on its internal file system to
load pages&mdash;where as a website would rely on its domain. The solution to this
problem was simple&mdash;routing system.</p>

<p>The issue with routing was that the routing system could not be based on a
absolute URL system. The absolute URL system would work best for a site, but not
for a app due to the difference in the file systems. The solution to that was to
implement a hash/push state routing system, which would allow the URLs to work
not only on a hosted website, but also the app itself.</p>

<p>Another problem I encountered that was absolutely terrifying to deal with was
external links vs internal links within the app/mobie-site. After hours of
querying Google for decent solutions to the problem, I barely found a solution.
The solution to the problem was to use Cordova&rsquo;s InAppBrowser
(which was not inherently clear&mdash;hence the hours of Google search) plugin&rsquo;s <code>window.open('http://url.com', '_system', 'location=no');</code>
which only works for iOS and a few other devices. Android was able to utilize <code>window.location = 'http://url.com';</code>.</p>

<p>Part of the reason this was a difficult problem was because that Cordova used
the WebViews that the different devices supplied. The WebViews could be best
described as web-browsers without the browsing (hence cross-compatibility via
HTML and JavaScript).</p>

<h2>Conclusion</h2>

<p>Overall Cordova was fairly fun to work with. No framework is without its quirks
and there will be many more obstacles for me in the future. The whole experience
really was exciting and I would recommend this framework to other developers.
Here&rsquo;s looking forward to future app development with Cordova!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Have Some Explaining to Do]]></title>
    <link href="http://fredlawl.github.io/article/i-have-some-explaining-to-do/"/>
    <updated>2014-01-11T19:31:13-06:00</updated>
    <id>http://fredlawl.github.io/article/i-have-some-explaining-to-do</id>
    <content type="html"><![CDATA[<p>I am Frederick Lawler and I make websites. I have worked at the company 40Digits
for close to three years. I have worked very closely with JavaScript, jQuery,
PHP, SQL, and HTML/CSS.</p>

<!-- more -->


<h2>Why not Wordpress?</h2>

<p>I decided to use Octopress and Git as my source of blogging software because, as
a developer I need not concern myself with the style or hassle of making a style
for my own personal blog. I want my blog to focus on personal questions,
stories, and you guessed it&mdash;code!</p>

<p>Another benefit to a software such as Git and Octopress, I don&rsquo;t need to sit
around and find decent syntax highlighting tools. I can just simple put my code
into here.</p>

<h2>Intentions</h2>

<p>I do not expect many people to visit my blog, and I also do not care if many
people do. I am using this blog as a means to get out questions, observations,
documentation, and code.</p>
]]></content>
  </entry>
  
</feed>
