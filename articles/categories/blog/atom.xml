<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: blog | FredLawl's Blog]]></title>
  <link href="http://fredlawl.github.io/articles/categories/blog/atom.xml" rel="self"/>
  <link href="http://fredlawl.github.io/"/>
  <updated>2014-01-26T17:24:14-06:00</updated>
  <id>http://fredlawl.github.io/</id>
  <author>
    <name><![CDATA[Frederick Lawler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Breaking away from PHP]]></title>
    <link href="http://fredlawl.github.io/article/breaking-away-from-php/"/>
    <updated>2014-01-26T16:17:55-06:00</updated>
    <id>http://fredlawl.github.io/article/breaking-away-from-php</id>
    <content type="html"><![CDATA[<p>Today marked the day where I am took my first steps to expanding my horizons
through learning the Python language. A couple of weeks ago, during a meeting
at work, a few other developers and I discussed plans to design and develop a
new CRM for the company.</p>

<!-- more -->


<h2>The CRM</h2>

<p>The CRM was broken up into three pieces: a database, a web-service, and a
front-end. The database piece is to store our data such as: users, tasks,
events, and discussions. The web-service piece is for syncing up various web
services across some of the online systems the company uses. The front-end part
of the CRM is a means to provide a easy interface to enter time, create
projects, and display information stored within the database.</p>

<h2>Choice to move</h2>

<p>My task was to lead a small team in the development of the web-service portion
of the CRM. The various programming languages that came across the table were:
PHP, Ruby, and Python. The developers of my team, including myself, are all
extremely comfortable using PHP&mdash;since we use that as our primary go-to language
for web development. Though we were comfortable with PHP, we saw this as an
opportunity to expand our knowledge and we eventually decided on using Python
for this portion of the CRM.</p>

<p>We choose Python over PHP for a couple of reasons. The primary reason we chose
Python was because of the scope of the project. The scope calls for parallel
processing because the web-service needs to sync data across many web-based
applications. The more services that are added to the project, the slower the
syncing and processing. Since PHP does not handle forking and threading very
nicely, Python seemed to be the optimal choice. The second reason we chose
Python was because of the ability to add technologies on the fly. This will be
important through the development process.</p>

<h2>Getting Started</h2>

<p>A part of the web-service piece is to be able to accept and parse webhooks that
are passed to it by the web services. Clearly, there had to be a way to serve
python files over the internet. Instead of designing a system to accept and
serve python files, I came to the conclusion of using the <a href="https://code.google.com/p/modwsgi/">mod_wsgi</a> for Apache combined with <a href="http://www.cherrypy.org/">CherryPy</a>.
To avoid re-inventing the wheel.</p>

<p>Since this was the first time ever considering Python for a web project, I had
to overcome the learning curve of installing and setting up wsgi_mod. To some,
this may be an easy task, but as a first-timer I had some difficulties.</p>

<p>I did not begin the process by installing it on my own hosted server, instead I
wanted to try installing it on my local development. Since MacOSX is my primary
development platform I did the following:</p>

<p>```
$ brew tap homebrew/apache
$ brew install mod_wsgi
$ cd /etc/apache2
$ subl . # Because I use sublime text 2 as my editor of choice</p>

<h1>Copied and pasted:</h1>

<h1>LoadModule wsgi_module /usr/local/Cellar/mod_wsgi/3.4/libexec/mod_wsgi.so</h1>

<h1>into http.conf</h1>

<h1>Opened up my vhosts file and added, based off recommended configurations:</h1>

<h1><VirtualHost *:80></h1>

<h1>ServerName python.local</h1>

<h1>ServerAlias www.python.local</h1>

<h1>DocumentRoot &ldquo;/Users/fredlawl/Sites/python/www&rdquo;</h1>

<p>#</p>

<h1>Alias /robots.txt /Users/fredlawl/Sites/python/www/robots.txt</h1>

<h1>Alias /favicon.ico /Users/fredlawl/Sites/python/www/favicon.ico</h1>

<h1>Alias /media/ /Users/fredlawl/Sites/python/www/media/</h1>

<p>#</p>

<h1><Directory /Users/fredlawl/Sites/python/www></h1>

<h1>Order allow,deny</h1>

<h1>Allow from all</h1>

<h1></Directory></h1>

<p>#</p>

<h1>WSGIDaemonProcess python.local processes=2 threads=15 display-name=%{GROUP}</h1>

<h1>WSGIProcessGroup python.local</h1>

<h1>WSGIScriptAlias / /Users/fredlawl/Sites/python/wsgi-scripts/app.wsgi</h1>

<p>#</p>

<h1><Directory /Users/fredlawl/Sites/python/wsgi-scripts></h1>

<h1>Order allow,deny</h1>

<h1>Allow from all</h1>

<h1></Directory></h1>

<h1></VirtualHost></h1>

<h1>&hellip; then saved.</h1>

<p>$ cd /Users/fredlawl/Sites
$ mkdir python
$ cd python
$ mkdir www
$ mkdir wsgi-scripts
$ cd wsgi-scripts
$ nano app.wsgi</p>

<h1>pasted in the following:</h1>

<h1>def application(environ, start_response):</h1>

<h1>status = &lsquo;200 OK&rsquo;</h1>

<h1>output = &lsquo;Hello World!&rsquo;</h1>

<p>#</p>

<h1>response_headers = [(&lsquo;Content-type&rsquo;, &lsquo;text/plain&rsquo;),</h1>

<h1>(&lsquo;Content-Length&rsquo;, str(len(output)))]</h1>

<h1>start_response(status, response_headers)</h1>

<p>#</p>

<h1>return [output]</h1>

<p>$ sudo apachectl restart
$ sudo nano /etc/hosts</p>

<h1>added in</h1>

<h1>127.0.0.1     python.local</h1>

<p>```</p>

<p>And there it was&hellip;Hello World! was displayed on my screen at <code>http://python.local/</code></p>

<p>I have not gotten into the installation of CherryPy just yet, but that is a post
for another day.</p>
]]></content>
  </entry>
  
</feed>
